[
    {
        "label": "bcrypt",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "bcrypt",
        "description": "bcrypt",
        "detail": "bcrypt",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "json",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "current_app",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "session",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "flash",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "abort",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Blueprint",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "request",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "redirect",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "url_for",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "jsonify",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Response",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "Flask",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "render_template",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "send_from_directory",
        "importPath": "flask",
        "description": "flask",
        "isExtraImport": true,
        "detail": "flask",
        "documentation": {}
    },
    {
        "label": "datetime",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "datetime",
        "description": "datetime",
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "datetime",
        "importPath": "datetime",
        "description": "datetime",
        "isExtraImport": true,
        "detail": "datetime",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "logout_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "UserMixin",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "current_user",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "LoginManager",
        "importPath": "flask_login",
        "description": "flask_login",
        "isExtraImport": true,
        "detail": "flask_login",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "urlencode",
        "importPath": "urllib.parse",
        "description": "urllib.parse",
        "isExtraImport": true,
        "detail": "urllib.parse",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "CORS",
        "importPath": "flask_cors",
        "description": "flask_cors",
        "isExtraImport": true,
        "detail": "flask_cors",
        "documentation": {}
    },
    {
        "label": "logging",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "logging",
        "description": "logging",
        "detail": "logging",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DateField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DateField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "DateField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectMultipleField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FieldList",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "HiddenField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "Form",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "PasswordField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "EmailField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "RadioField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "SelectField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "IntegerField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "StringField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "validators",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "FloatField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "TextAreaField",
        "importPath": "wtforms",
        "description": "wtforms",
        "isExtraImport": true,
        "detail": "wtforms",
        "documentation": {}
    },
    {
        "label": "InventarioG",
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "isExtraImport": true,
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "InventarioG",
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "isExtraImport": true,
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "InventarioG",
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "isExtraImport": true,
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "VentaGalleta",
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "isExtraImport": true,
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "Merma",
        "importPath": "blueprints.merma.model_merma",
        "description": "blueprints.merma.model_merma",
        "isExtraImport": true,
        "detail": "blueprints.merma.model_merma",
        "documentation": {}
    },
    {
        "label": "Merma",
        "importPath": "blueprints.merma.model_merma",
        "description": "blueprints.merma.model_merma",
        "isExtraImport": true,
        "detail": "blueprints.merma.model_merma",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DevelomentConfig",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "importPath": "config",
        "description": "config",
        "isExtraImport": true,
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Receta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "isExtraImport": true,
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "FlaskForm",
        "importPath": "flask_wtf",
        "description": "flask_wtf",
        "isExtraImport": true,
        "detail": "flask_wtf",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "DataRequired",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "ValidationError",
        "importPath": "wtforms.validators",
        "description": "wtforms.validators",
        "isExtraImport": true,
        "detail": "wtforms.validators",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "SQLAlchemy",
        "importPath": "flask_sqlalchemy",
        "description": "flask_sqlalchemy",
        "isExtraImport": true,
        "detail": "flask_sqlalchemy",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "defaultdict",
        "importPath": "collections",
        "description": "collections",
        "isExtraImport": true,
        "detail": "collections",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "generate_password_hash",
        "importPath": "werkzeug.security",
        "description": "werkzeug.security",
        "isExtraImport": true,
        "detail": "werkzeug.security",
        "documentation": {}
    },
    {
        "label": "Mp",
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "isExtraImport": true,
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "InventarioMP",
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "isExtraImport": true,
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "Mp",
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "isExtraImport": true,
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "Mp",
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "isExtraImport": true,
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "Mp",
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "isExtraImport": true,
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "secure_filename",
        "importPath": "werkzeug.utils",
        "description": "werkzeug.utils",
        "isExtraImport": true,
        "detail": "werkzeug.utils",
        "documentation": {}
    },
    {
        "label": "os",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "os",
        "description": "os",
        "detail": "os",
        "documentation": {}
    },
    {
        "label": "recetas_bp",
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "isExtraImport": true,
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "recetas_bp",
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "isExtraImport": true,
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "login_required",
        "importPath": "flask_login ",
        "description": "flask_login ",
        "isExtraImport": true,
        "detail": "flask_login ",
        "documentation": {}
    },
    {
        "label": "FileField",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "FileAllowed",
        "importPath": "flask_wtf.file",
        "description": "flask_wtf.file",
        "isExtraImport": true,
        "detail": "flask_wtf.file",
        "documentation": {}
    },
    {
        "label": "re",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "re",
        "description": "re",
        "detail": "re",
        "documentation": {}
    },
    {
        "label": "pandas",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pandas",
        "description": "pandas",
        "detail": "pandas",
        "documentation": {}
    },
    {
        "label": "plotly.express",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "plotly.express",
        "description": "plotly.express",
        "detail": "plotly.express",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "importPath": "blueprints.tablero.function.abm",
        "description": "blueprints.tablero.function.abm",
        "isExtraImport": true,
        "detail": "blueprints.tablero.function.abm",
        "documentation": {}
    },
    {
        "label": "Fernet",
        "importPath": "cryptography.fernet",
        "description": "cryptography.fernet",
        "isExtraImport": true,
        "detail": "cryptography.fernet",
        "documentation": {}
    },
    {
        "label": "load_dotenv",
        "importPath": "dotenv",
        "description": "dotenv",
        "isExtraImport": true,
        "detail": "dotenv",
        "documentation": {}
    },
    {
        "label": "create_engine",
        "importPath": "sqlalchemy",
        "description": "sqlalchemy",
        "isExtraImport": true,
        "detail": "sqlalchemy",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "CSRFProtect",
        "importPath": "flask_wtf.csrf",
        "description": "flask_wtf.csrf",
        "isExtraImport": true,
        "detail": "flask_wtf.csrf",
        "documentation": {}
    },
    {
        "label": "menu_bp",
        "importPath": "blueprints.menu.menu",
        "description": "blueprints.menu.menu",
        "isExtraImport": true,
        "detail": "blueprints.menu.menu",
        "documentation": {}
    },
    {
        "label": "login_bp",
        "importPath": "blueprints.login.login",
        "description": "blueprints.login.login",
        "isExtraImport": true,
        "detail": "blueprints.login.login",
        "documentation": {}
    },
    {
        "label": "produccion_bp",
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "isExtraImport": true,
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "usuario_bp",
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "isExtraImport": true,
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "tablero_bp",
        "importPath": "blueprints.tablero.tablero",
        "description": "blueprints.tablero.tablero",
        "isExtraImport": true,
        "detail": "blueprints.tablero.tablero",
        "documentation": {}
    },
    {
        "label": "venta_bp",
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "isExtraImport": true,
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "proveedor_bp",
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "isExtraImport": true,
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "merma_bp",
        "importPath": "blueprints.merma.merma",
        "description": "blueprints.merma.merma",
        "isExtraImport": true,
        "detail": "blueprints.merma.merma",
        "documentation": {}
    },
    {
        "label": "notificaciones_bp",
        "importPath": "blueprints.notificacion.notificacion",
        "description": "blueprints.notificacion.notificacion",
        "isExtraImport": true,
        "detail": "blueprints.notificacion.notificacion",
        "documentation": {}
    },
    {
        "label": "mp_bp",
        "importPath": "blueprints.mp.mp",
        "description": "blueprints.mp.mp",
        "isExtraImport": true,
        "detail": "blueprints.mp.mp",
        "documentation": {}
    },
    {
        "label": "Autenticador",
        "kind": 6,
        "importPath": "blueprints.login.function.auth",
        "description": "blueprints.login.function.auth",
        "peekOfCode": "class Autenticador:\n    def login(self, correo, password):\n        print(correo)\n        print(password)\n        usuario_a_login = Usuario.query.filter_by(correo=correo).first()\n        id = usuario_a_login.id\n        if not usuario_a_login:\n          print(\"No se encontro usuario\")\n          alert = 'warning'\n          messages = \"No se encontro el correo {} con el que intentas acceder\".format(correo)",
        "detail": "blueprints.login.function.auth",
        "documentation": {}
    },
    {
        "label": "desactivar_cuenta",
        "kind": 6,
        "importPath": "blueprints.login.function.intentos_f",
        "description": "blueprints.login.function.intentos_f",
        "peekOfCode": "class desactivar_cuenta:\n    def intentos(self,):\n        if 'contador' not in session:\n            session['contador'] = 0\n        messages = ''\n        contador = session['contador']\n        contador += 1\n        print('intento', contador)\n        if contador > 3:\n          messages = \"Ha superado el número máximo de intentos. Su cuenta ha sido desactivada.\"",
        "detail": "blueprints.login.function.intentos_f",
        "documentation": {}
    },
    {
        "label": "registro",
        "kind": 6,
        "importPath": "blueprints.login.function.ultima_conexion",
        "description": "blueprints.login.function.ultima_conexion",
        "peekOfCode": "class registro:\n    def ultima_conexion(self, id):\n        ultima_c = Usuario.query.filter_by(id=id).first()\n        ultima_c.ultima_conexion = datetime.datetime.now()\n        db.session.add(ultima_c)\n        db.session.commit()\n        return",
        "detail": "blueprints.login.function.ultima_conexion",
        "documentation": {}
    },
    {
        "label": "login",
        "kind": 2,
        "importPath": "blueprints.login.login",
        "description": "blueprints.login.login",
        "peekOfCode": "def login():\n    form_auth = loginForm(request.form)\n    messages = ''\n    alert = ''\n    mostrar = ''\n    if request.method == 'POST':\n        try:\n            messages, alert, user_id = Autenticador().login(form_auth.correo.data, form_auth.pwd.data)\n            messages, contador = desactivar_cuenta().intentos()\n            if alert == 'warning':",
        "detail": "blueprints.login.login",
        "documentation": {}
    },
    {
        "label": "logout",
        "kind": 2,
        "importPath": "blueprints.login.login",
        "description": "blueprints.login.login",
        "peekOfCode": "def logout():\n    form_auth = loginForm(request.form)\n    id = current_user.id\n    registro().ultima_conexion(id)\n    logout_user()\n    mesasges = 'Has cerrado sesión.'\n    alert ='info'\n    flash('Has cerrado sesión.')\n    return render_template('login.html', n=alert, form = form_auth)",
        "detail": "blueprints.login.login",
        "documentation": {}
    },
    {
        "label": "login_bp",
        "kind": 5,
        "importPath": "blueprints.login.login",
        "description": "blueprints.login.login",
        "peekOfCode": "login_bp = Blueprint(\"login\", __name__, template_folder=\"templates\")\n@login_bp.route(\"/login\", methods=['GET', 'POST'])\ndef login():\n    form_auth = loginForm(request.form)\n    messages = ''\n    alert = ''\n    mostrar = ''\n    if request.method == 'POST':\n        try:\n            messages, alert, user_id = Autenticador().login(form_auth.correo.data, form_auth.pwd.data)",
        "detail": "blueprints.login.login",
        "documentation": {}
    },
    {
        "label": "loginForm",
        "kind": 6,
        "importPath": "blueprints.login.login_form",
        "description": "blueprints.login.login_form",
        "peekOfCode": "class loginForm(Form):\n    pwd = PasswordField(\"\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=30, message=\"Ingresa contraseña valido\")\n    ])\n    correo = EmailField(\"\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=50, message=\"Ingresa correo valido\")])",
        "detail": "blueprints.login.login_form",
        "documentation": {}
    },
    {
        "label": "menu",
        "kind": 2,
        "importPath": "blueprints.menu.menu",
        "description": "blueprints.menu.menu",
        "peekOfCode": "def menu():\n    nombre = current_user.nombre\n    rol = current_user.rol\n    ultima_c = current_user.ultima_conexion\n    return render_template(\"menu.html\", username = nombre, rol = rol, ultima = ultima_c)",
        "detail": "blueprints.menu.menu",
        "documentation": {}
    },
    {
        "label": "menu_bp",
        "kind": 5,
        "importPath": "blueprints.menu.menu",
        "description": "blueprints.menu.menu",
        "peekOfCode": "menu_bp = Blueprint(\"menu\", __name__, template_folder=\"templates\")\n@menu_bp.route(\"/menu\")\n@login_required\ndef menu():\n    nombre = current_user.nombre\n    rol = current_user.rol\n    ultima_c = current_user.ultima_conexion\n    return render_template(\"menu.html\", username = nombre, rol = rol, ultima = ultima_c)",
        "detail": "blueprints.menu.menu",
        "documentation": {}
    },
    {
        "label": "GestionMerma",
        "kind": 6,
        "importPath": "blueprints.merma.function.abm",
        "description": "blueprints.merma.function.abm",
        "peekOfCode": "class GestionMerma:\n    def guardar_merma(self, form, id_Usuario):\n        producto = form.galleta.data\n        cantidad = form.cantidad_m.data\n        observacion = form.observaciones.data\n        alert = ''\n        messages = ''\n        print(producto)\n        id = id_Usuario\n        nueva_merma = Merma(producto=producto,",
        "detail": "blueprints.merma.function.abm",
        "documentation": {}
    },
    {
        "label": "MermaForm",
        "kind": 6,
        "importPath": "blueprints.merma.form_merma",
        "description": "blueprints.merma.form_merma",
        "peekOfCode": "class MermaForm(Form):\n    id = IntegerField('id', [validators.number_range(min=1, max=20, message='valor no valido')])\n    cantidad_m = IntegerField(\"Cantidad Merma\",[\n        validators.DataRequired(message='El campo es requerido'),\n    ])\n    galleta = StringField(\"Gallata\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=30, message=\"Ingresa contraseña valido\")\n    ])\n    observaciones = TextAreaField(\"Observaciones\",[",
        "detail": "blueprints.merma.form_merma",
        "documentation": {}
    },
    {
        "label": "merma",
        "kind": 2,
        "importPath": "blueprints.merma.merma",
        "description": "blueprints.merma.merma",
        "peekOfCode": "def merma():\n    merma_form = MermaForm(request.form)\n    print('Prueba')\n    print(request.method )\n    messages = ''\n    alert = ''\n    g = {}\n    if request.method == 'POST':\n      print('entro a la validacion')\n      id = current_user.id",
        "detail": "blueprints.merma.merma",
        "documentation": {}
    },
    {
        "label": "merma_tablero",
        "kind": 2,
        "importPath": "blueprints.merma.merma",
        "description": "blueprints.merma.merma",
        "peekOfCode": "def merma_tablero():\n    g = Merma.query.all();\n    return render_template(\"tablero_merma.html\", merma = g )",
        "detail": "blueprints.merma.merma",
        "documentation": {}
    },
    {
        "label": "merma_bp",
        "kind": 5,
        "importPath": "blueprints.merma.merma",
        "description": "blueprints.merma.merma",
        "peekOfCode": "merma_bp = Blueprint(\"merma\", __name__, template_folder=\"templates\")\n@merma_bp.route('/merma' ,methods=['GET', 'POST'])\ndef merma():\n    merma_form = MermaForm(request.form)\n    print('Prueba')\n    print(request.method )\n    messages = ''\n    alert = ''\n    g = {}\n    if request.method == 'POST':",
        "detail": "blueprints.merma.merma",
        "documentation": {}
    },
    {
        "label": "Merma",
        "kind": 6,
        "importPath": "blueprints.merma.model_merma",
        "description": "blueprints.merma.model_merma",
        "peekOfCode": "class Merma(db.Model):\n    idMerma=db.Column(db.Integer, primary_key=True)\n    fecha=db.Column(db.String(30), default=datetime.datetime.now().strftime(\"%Y-%m-%d %H:%M\"))\n    producto=db.Column(db.String(50))\n    cantidad=db.Column(db.Integer)\n    id=db.Column(db.Integer)\n    observacion=db.Column(db.Text)",
        "detail": "blueprints.merma.model_merma",
        "documentation": {}
    },
    {
        "label": "MPForm",
        "kind": 6,
        "importPath": "blueprints.mp.forms",
        "description": "blueprints.mp.forms",
        "peekOfCode": "class MPForm(FlaskForm):\n    idMP = IntegerField('ID Ingrediente')\n    ingrediente = StringField('Ingrediente', validators=[DataRequired()])\n    medicion_choices = [('gr', 'gr'), ('ml', 'ml'), ('pz', 'pz')]\n    medicion = SelectField('Medicion', choices=medicion_choices, validators=[DataRequired()])\n    descripcion = StringField('Descripcion', validators=[DataRequired()])\n    precio = FloatField('Precio', validators=[DataRequired()])",
        "detail": "blueprints.mp.forms",
        "documentation": {}
    },
    {
        "label": "Mp",
        "kind": 6,
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "peekOfCode": "class Mp(db.Model):\n    __tablename__ = 'mp'\n    idMP = db.Column(db.Integer, primary_key=True)\n    ingrediente = db.Column(db.String) \n    medicion = db.Column(db.String)\n    descripcion = db.Column(db.String)  # Corregido de Integer a String\n    precio = db.Column(db.Float)\nclass InventarioMP(db.Model):\n    __tablename__ = 'InventarioMP'  # Corregido de inventarioMP a InventarioMP\n    idMateria = db.Column(db.Integer, primary_key=True, autoincrement=True)",
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "InventarioMP",
        "kind": 6,
        "importPath": "blueprints.mp.models",
        "description": "blueprints.mp.models",
        "peekOfCode": "class InventarioMP(db.Model):\n    __tablename__ = 'InventarioMP'  # Corregido de inventarioMP a InventarioMP\n    idMateria = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    idMP = db.Column(db.Integer, db.ForeignKey('mp.idMP'))\n    existencias = db.Column(db.Integer)\n    fecha_caducidad = db.Column(db.String(15))\n    mp = db.relationship(\"Mp\")  # Corregido de mp a Mp",
        "detail": "blueprints.mp.models",
        "documentation": {}
    },
    {
        "label": "ingresar_mp",
        "kind": 2,
        "importPath": "blueprints.mp.mp",
        "description": "blueprints.mp.mp",
        "peekOfCode": "def ingresar_mp():\n    mp_form =MPForm(request.form)\n    if request.method=='POST' and mp_form.validate():\n            mp=Mp(ingrediente=mp_form.ingrediente.data,\n                        medicion=mp_form.medicion.data,\n                        descripcion=mp_form.descripcion.data,\n                        precio=mp_form.precio.data\n                        )\n            db.session.add(mp)\n            db.session.commit()",
        "detail": "blueprints.mp.mp",
        "documentation": {}
    },
    {
        "label": "eliminar_mp",
        "kind": 2,
        "importPath": "blueprints.mp.mp",
        "description": "blueprints.mp.mp",
        "peekOfCode": "def eliminar_mp(id):\n    if request.method == 'POST':\n        materia_prima = Mp.query.get_or_404(id)\n        db.session.delete(materia_prima)\n        db.session.commit()\n        flash('Ingrediente eliminado correctamente')\n    return redirect(url_for('mp.ingresar_mp'))\n@mp_bp.route(\"/mp/<int:id>/modificar\", methods=['GET', 'POST'])\n@login_required\ndef modificar_mp(id):",
        "detail": "blueprints.mp.mp",
        "documentation": {}
    },
    {
        "label": "modificar_mp",
        "kind": 2,
        "importPath": "blueprints.mp.mp",
        "description": "blueprints.mp.mp",
        "peekOfCode": "def modificar_mp(id):\n    materia_prima = Mp.query.get_or_404(id)\n    form = MPForm(request.form, obj=materia_prima)\n    if form.validate_on_submit():\n        form.populate_obj(materia_prima)\n        db.session.commit()\n        flash('Ingrediente modificado correctamente')\n        return redirect(url_for('mp.ingresar_mp'))\n    return render_template('modificar_mp.html', form=form)",
        "detail": "blueprints.mp.mp",
        "documentation": {}
    },
    {
        "label": "mp_bp",
        "kind": 5,
        "importPath": "blueprints.mp.mp",
        "description": "blueprints.mp.mp",
        "peekOfCode": "mp_bp = Blueprint(\"mp\", __name__, template_folder=\"templates\")\n@mp_bp.route(\"/mp\", methods=['GET', 'POST'])\n@login_required\ndef ingresar_mp():\n    mp_form =MPForm(request.form)\n    if request.method=='POST' and mp_form.validate():\n            mp=Mp(ingrediente=mp_form.ingrediente.data,\n                        medicion=mp_form.medicion.data,\n                        descripcion=mp_form.descripcion.data,\n                        precio=mp_form.precio.data",
        "detail": "blueprints.mp.mp",
        "documentation": {}
    },
    {
        "label": "Notificacion",
        "kind": 6,
        "importPath": "blueprints.notificacion.model_notificacion",
        "description": "blueprints.notificacion.model_notificacion",
        "peekOfCode": "class Notificacion(db.Model):\n    id=db.Column(db.Integer, primary_key=True)\n    nombre_u=db.Column(db.String(50))\n    nombre_g = db.Column(db.String(10))\n    estatus = db.Column(db.String(10))\n    create_date=db.Column(db.DateTime, default=datetime.datetime.now)",
        "detail": "blueprints.notificacion.model_notificacion",
        "documentation": {}
    },
    {
        "label": "ntf",
        "kind": 2,
        "importPath": "blueprints.notificacion.notificacion",
        "description": "blueprints.notificacion.notificacion",
        "peekOfCode": "def ntf():\n    ntf = NotificacionForm()\n    nombre = current_user.nombre\n    if request.method == 'POST':\n      return redirect('/venta')",
        "detail": "blueprints.notificacion.notificacion",
        "documentation": {}
    },
    {
        "label": "notificaciones_bp",
        "kind": 5,
        "importPath": "blueprints.notificacion.notificacion",
        "description": "blueprints.notificacion.notificacion",
        "peekOfCode": "notificaciones_bp = Blueprint(\"notificaciones\", __name__, template_folder=\"templates\")\n@notificaciones_bp.route(\"/notificacion\")\n@login_required\ndef ntf():\n    ntf = NotificacionForm()\n    nombre = current_user.nombre\n    if request.method == 'POST':\n      return redirect('/venta')",
        "detail": "blueprints.notificacion.notificacion",
        "documentation": {}
    },
    {
        "label": "NotificacionForm",
        "kind": 6,
        "importPath": "blueprints.notificacion.notificacion_form",
        "description": "blueprints.notificacion.notificacion_form",
        "peekOfCode": "class NotificacionForm(Form):\n    id = IntegerField('id', [validators.number_range(min=1, max=20, message='valor no valido')])\n    nombre_U = StringField('Nombre del personal')\n    estatus_choices = [('normal', 'Normal'),('incremento', 'Incremento'), ('urgente','Urgente')]\n    estatus = SelectField(\"Estatus\", choices=estatus_choices, validators=[validators.DataRequired(message='El campo es requerido')])\n    galletas = [('chocolate y menta', 'Chocolate y Menta'),('avena y nueces', 'Avena y Nueces'),  ('limón', 'Limón'), ('coco',' Coco'), ('chocolate blanco y arándanos','Chocolate Blanco y Arándanos'), ('almendra','Almendra'), ('mantequilla de maní','Mantequilla de Maní'), ('chía y coco', 'Chía y Coco'), ('almendra y naranja','Almendra y Naranja'), ('maiz','Maiz')]\n    galleta = SelectField(\"Galletas\", choices=galletas, validators=[validators.DataRequired(message='Es nesesario seleccionar una galleta')])",
        "detail": "blueprints.notificacion.notificacion_form",
        "documentation": {}
    },
    {
        "label": "Gestorproduccion",
        "kind": 6,
        "importPath": "blueprints.produccion.function.abm",
        "description": "blueprints.produccion.function.abm",
        "peekOfCode": "class Gestorproduccion:\n    def guardar_produccion(self, form_pro):\n        lista_cantidad = []\n        lista_idMp = []\n        galleta = form_pro.galleta.data\n        produccion = int(200)\n        fecha = form_pro.fecha.data\n        estatus = 'pendiente'\n        #Recetas, invetario_materia invetario_g\n        if estatus == 'pendiente' or estatus == 'terminado':",
        "detail": "blueprints.produccion.function.abm",
        "documentation": {}
    },
    {
        "label": "Produccion",
        "kind": 6,
        "importPath": "blueprints.produccion.model_produccion",
        "description": "blueprints.produccion.model_produccion",
        "peekOfCode": "class Produccion(db.Model):\n    id = db.Column(db.Integer, primary_key=True)\n    nombre = db.Column(db.String(50))\n    cantidad = db.Column(db.Integer)\n    estatus = db.Column(db.String(10))\n    create_date = db.Column(db.DateTime)",
        "detail": "blueprints.produccion.model_produccion",
        "documentation": {}
    },
    {
        "label": "acceso_forbidden",
        "kind": 2,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "def acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@produccion_bp.route('/produccion', methods=['GET', 'POST'])\n@login_required\ndef produccion_index():\n    form_produccion = ProduccionForm(request.form)\n    messages =''\n    alert=''\n    rol = current_user.rol",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "produccion_index",
        "kind": 2,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "def produccion_index():\n    form_produccion = ProduccionForm(request.form)\n    messages =''\n    alert=''\n    rol = current_user.rol\n    print('rol:', rol)\n    if rol != 'administrador':\n      print('entro a la validacion')\n      print(static_folder)\n      abort(403)",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "modificar",
        "kind": 2,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "def modificar():\n    form_produccion = ProduccionForm(request.form)\n    id_produccion = request.args.get('id')\n    galletas = {}\n    session['id_produccion'] = id_produccion\n    id_p = session.get('id_produccion')\n    method = request.method\n    print('metodo ejecutado ', method)\n    messages, form_pro, alert = Gestorproduccion().modificar_produccion(id_p, form_produccion, method)\n    print(alert)",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "produccion_cantidad",
        "kind": 2,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "def produccion_cantidad():\n    form_produccion = ProduccionForm(request.form)\n    mi_variable_disabled = False\n    if mi_variable_disabled:\n      print('sen cambio a False')\n    edit = request.form.get('disabled')\n    if edit == 'cantidad':\n      print('entro a desactivar')\n      return redirect(url_for('produccion.produccion_index'))\n    return render_template(\"produccion_cantidad.html\", form = form_produccion, cantidad = mi_variable_disabled)",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "produccion_bp",
        "kind": 5,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "produccion_bp = Blueprint(\"produccion\", __name__, template_folder=\"templates\")\nstatic_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@produccion_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@produccion_bp.route('/produccion', methods=['GET', 'POST'])\n@login_required\ndef produccion_index():\n    form_produccion = ProduccionForm(request.form)",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "static_folder",
        "kind": 5,
        "importPath": "blueprints.produccion.produccion",
        "description": "blueprints.produccion.produccion",
        "peekOfCode": "static_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@produccion_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@produccion_bp.route('/produccion', methods=['GET', 'POST'])\n@login_required\ndef produccion_index():\n    form_produccion = ProduccionForm(request.form)\n    messages =''",
        "detail": "blueprints.produccion.produccion",
        "documentation": {}
    },
    {
        "label": "ProduccionForm",
        "kind": 6,
        "importPath": "blueprints.produccion.produccion_form",
        "description": "blueprints.produccion.produccion_form",
        "peekOfCode": "class ProduccionForm(Form):\n    id = IntegerField('id', [validators.number_range(min=1, max=20, message='valor no valido')])\n    cantidad = IntegerField(\"Cantidad\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=30, message=\"La cantodad valida\")\n    ])\n    g = StringField(\"Galleta\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=30, message=\"La cantodad valida\")\n    ])",
        "detail": "blueprints.produccion.produccion_form",
        "documentation": {}
    },
    {
        "label": "Proveedor",
        "kind": 6,
        "importPath": "blueprints.proveedor.model_proveedor",
        "description": "blueprints.proveedor.model_proveedor",
        "peekOfCode": "class Proveedor(db.Model):\n    idProveedor = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    nomEmpresa = db.Column(db.String(30))\n    direccion = db.Column(db.String(50))\n    telefono = db.Column(db.String(10))\n    nomTrabajador = db.Column(db.String(30))\n    estatus = db.Column(db.Boolean)\nclass ingredienteProveedor(db.Model):\n    idIngreProvee = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    idProveedor = db.Column(db.Integer, db.ForeignKey('proveedor.idProveedor'))",
        "detail": "blueprints.proveedor.model_proveedor",
        "documentation": {}
    },
    {
        "label": "ingredienteProveedor",
        "kind": 6,
        "importPath": "blueprints.proveedor.model_proveedor",
        "description": "blueprints.proveedor.model_proveedor",
        "peekOfCode": "class ingredienteProveedor(db.Model):\n    idIngreProvee = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    idProveedor = db.Column(db.Integer, db.ForeignKey('proveedor.idProveedor'))\n    idMP = db.Column(db.Integer, db.ForeignKey('mp.idMP'))\n    proveedor = db.relationship('Proveedor', backref=db.backref('ingredientes_proveedor', lazy=True))\n    #mp = db.relationship('MP', backref=db.backref('proveedores', lazy=True))",
        "detail": "blueprints.proveedor.model_proveedor",
        "documentation": {}
    },
    {
        "label": "acceso_forbidden",
        "kind": 2,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "def acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@proveedor_bp.route(\"/insProveedor\", methods=[\"GET\", \"POST\"])\n@login_required\ndef insProveedor():\n    rol = current_user.rol\n    print('rol:', rol)\n    if rol != 'administrador':\n      print('entro a la validacion')",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "insProveedor",
        "kind": 2,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "def insProveedor():\n    rol = current_user.rol\n    print('rol:', rol)\n    if rol != 'administrador':\n      print('entro a la validacion')\n      print(static_folder)\n      abort(403)\n    formProvedor = ProveedorForm(request.form)\n    formMateriaP = MateriaPForm(request.form)\n    ingredientes_choices = None",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "eliminar",
        "kind": 2,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "def eliminar():\n    provee = int(request.args.get('id'))\n    proveedor = Proveedor.query.get(provee)\n    if proveedor:\n        proveedor.estatus = not proveedor.estatus  # Cambiar a True si es False y viceversa\n        db.session.commit()\n    return redirect(url_for('.insProveedor'))\n    # Ruta para mostrar el formulario de actualización con los datos del proveedor seleccionado\n@proveedor_bp.route(\"/actualizar\", methods=[\"GET\", \"POST\"])\ndef actualizar():",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "actualizar",
        "kind": 2,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "def actualizar():\n    if request.method == \"POST\":\n        return \"Proveedor actualizado exitosamente\"\n    else:\n        proveedor_id = request.args.get('id')\n        resultados = db.session.query(\n    Proveedor.idProveedor,\n    Proveedor.nomEmpresa,\n    Proveedor.direccion,\n    Proveedor.telefono,",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "updProveedor",
        "kind": 2,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "def updProveedor(id):\n    rol = current_user.rol\n    if rol != 'administrador':\n        abort(403)\n    proveedor = Proveedor.query.get_or_404(id)\n    form = ProveedorForm(request.form, obj=proveedor)\n    formMateP = MateriaPForm(request.form)\n    ingredientes_choices = [(ingrediente.idMP, ingrediente.ingrediente) for ingrediente in Mp.query.all()]\n    if request.method == 'POST' and form.validate():\n        form.populate_obj(proveedor)",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "proveedor_bp",
        "kind": 5,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "proveedor_bp = Blueprint(\"proveedor\", __name__, template_folder=\"templates\")\nstatic_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@proveedor_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@proveedor_bp.route(\"/insProveedor\", methods=[\"GET\", \"POST\"])\n@login_required\ndef insProveedor():\n    rol = current_user.rol",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "static_folder",
        "kind": 5,
        "importPath": "blueprints.proveedor.proveedor",
        "description": "blueprints.proveedor.proveedor",
        "peekOfCode": "static_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@proveedor_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@proveedor_bp.route(\"/insProveedor\", methods=[\"GET\", \"POST\"])\n@login_required\ndef insProveedor():\n    rol = current_user.rol\n    print('rol:', rol)",
        "detail": "blueprints.proveedor.proveedor",
        "documentation": {}
    },
    {
        "label": "ProveedorForm",
        "kind": 6,
        "importPath": "blueprints.proveedor.proveedor_form",
        "description": "blueprints.proveedor.proveedor_form",
        "peekOfCode": "class ProveedorForm(Form):\n    nomEmpresa = StringField(\"Nombre de la empresa\", [\n        validators.DataRequired(message='El campo es requerido'),\n        validators.Length(min=1, max=30, message=\"Ingresa un nombre de empresa válido\")\n    ])\n    direccion = StringField(\"Dirección\", [\n        validators.DataRequired(message='El campo es requerido'),\n        validators.Length(min=1, max=50, message=\"Ingresa una dirección válida\")\n    ])\n    telefono = StringField(\"Teléfono\", [",
        "detail": "blueprints.proveedor.proveedor_form",
        "documentation": {}
    },
    {
        "label": "MateriaPForm",
        "kind": 6,
        "importPath": "blueprints.proveedor.proveedor_form",
        "description": "blueprints.proveedor.proveedor_form",
        "peekOfCode": "class MateriaPForm(FlaskForm):\n    ingredientes = SelectMultipleField(\"Ingredientes\", coerce=int)\n    def validate_ingredientes(form, field):\n        if not field.data:\n            raise ValidationError('Debes seleccionar al menos un ingrediente.')",
        "detail": "blueprints.proveedor.proveedor_form",
        "documentation": {}
    },
    {
        "label": "RecetaForm",
        "kind": 6,
        "importPath": "blueprints.receta.forms",
        "description": "blueprints.receta.forms",
        "peekOfCode": "class RecetaForm(Form):\n    cantidad = StringField('Cantidad', [\n        validators.DataRequired(message='El campo es requerido'),\n        validators.Regexp('^\\d+(\\.\\d+)?$', message='Ingresa una cantidad válida')\n    ])\n    idMp= SelectField(\"Ingrediente\",coerce=int)\n    idGalleta = SelectField(\"Galleta\", coerce=int)  # Se asume que se cargarán \n    nombreGalleta = HiddenField()\nclass GalletaForm(Form):\n    idGalleta = IntegerField('Ingrediente',)",
        "detail": "blueprints.receta.forms",
        "documentation": {}
    },
    {
        "label": "GalletaForm",
        "kind": 6,
        "importPath": "blueprints.receta.forms",
        "description": "blueprints.receta.forms",
        "peekOfCode": "class GalletaForm(Form):\n    idGalleta = IntegerField('Ingrediente',)\n    nombre = StringField('Nombre')\n    descripcion = StringField('Descripcion')\n    precio=FloatField('Precio')\n    peso=FloatField('Peso')\n    imagen = FileField('Imagen', validators=[FileAllowed(['jpg', 'png', 'jpeg'], 'Solo imágenes!')])\nclass MpForm(Form):\n    ingredientes = FieldList(SelectField('Ingrediente', coerce=int), min_entries=1)",
        "detail": "blueprints.receta.forms",
        "documentation": {}
    },
    {
        "label": "MpForm",
        "kind": 6,
        "importPath": "blueprints.receta.forms",
        "description": "blueprints.receta.forms",
        "peekOfCode": "class MpForm(Form):\n    ingredientes = FieldList(SelectField('Ingrediente', coerce=int), min_entries=1)",
        "detail": "blueprints.receta.forms",
        "documentation": {}
    },
    {
        "label": "Receta",
        "kind": 6,
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "peekOfCode": "class Receta(db.Model):\n    idReceta = db.Column(db.Integer, primary_key=True)\n    idMP = db.Column(db.Integer, db.ForeignKey('mp.idMP')) \n    cantidad = db.Column(db.Float)\n    idGalleta = db.Column(db.Integer, db.ForeignKey('galleta.idGalleta')) \nclass Galleta(db.Model):\n    idGalleta = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    nombre = db.Column(db.String(50))\n    descripcion = db.Column(db.String(80))\n    precio = db.Column(db.Float)",
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "Galleta",
        "kind": 6,
        "importPath": "blueprints.receta.models",
        "description": "blueprints.receta.models",
        "peekOfCode": "class Galleta(db.Model):\n    idGalleta = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    nombre = db.Column(db.String(50))\n    descripcion = db.Column(db.String(80))\n    precio = db.Column(db.Float)\n    peso = db.Column(db.Float)\n    imagen = db.Column(db.String(120))  # Ruta de la imagen",
        "detail": "blueprints.receta.models",
        "documentation": {}
    },
    {
        "label": "crear_receta",
        "kind": 2,
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "peekOfCode": "def crear_receta():\n    # Crear las instancias de los formularios\n    galleta_form = GalletaForm(request.form)\n    recetas_form = RecetaForm(request.form)\n    ingredientes_texto = request.form.get('ingredientes_texto')\n    ingredientes = []\n    if ingredientes_texto is not None:\n        ingredientes = json.loads(ingredientes_texto)\n    # Obtener las opciones para los campos de selección\n    lista_ingredientes = [(mp.idMP, mp.ingrediente) for mp in Mp.query.all()]",
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "eliminar_receta",
        "kind": 2,
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "peekOfCode": "def eliminar_receta():\n    id_galleta = request.form.get('idGalleta')\n    recetas = Receta.query.filter_by(idGalleta=id_galleta).all()\n    for receta in recetas:\n        db.session.delete(receta)\n    # Guardar los cambios en la base de datos\n    db.session.commit()\n    flash('¡Recetas eliminadas correctamente!', 'success')\n    # Redireccionar a la página principal para evitar reenvío del formulario\n    return redirect(url_for('recetas.crear_receta'))",
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "calcular_utilidades",
        "kind": 2,
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "peekOfCode": "def calcular_utilidades():\n    # Obtener todas las galletas de la base de datos\n    galletas = Galleta.query.all()\n    # Lista para almacenar los resultados de los cálculos\n    resultados = []\n    # Iterar sobre cada galleta y calcular su costo y utilidad\n    for galleta in galletas:\n        # Obtener los ingredientes y cantidades de la receta de la galleta\n        recetas = Receta.query.filter_by(idGalleta=galleta.idGalleta).all()\n        costo_total = 0",
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "recetas_bp",
        "kind": 5,
        "importPath": "blueprints.receta.recetas",
        "description": "blueprints.receta.recetas",
        "peekOfCode": "recetas_bp = Blueprint(\"recetas\", __name__, template_folder=\"templates\")\n@recetas_bp.route(\"/recetas\", methods=['GET', 'POST'])\n@login_required\ndef crear_receta():\n    # Crear las instancias de los formularios\n    galleta_form = GalletaForm(request.form)\n    recetas_form = RecetaForm(request.form)\n    ingredientes_texto = request.form.get('ingredientes_texto')\n    ingredientes = []\n    if ingredientes_texto is not None:",
        "detail": "blueprints.receta.recetas",
        "documentation": {}
    },
    {
        "label": "Dashboard",
        "kind": 6,
        "importPath": "blueprints.tablero.function.abm",
        "description": "blueprints.tablero.function.abm",
        "peekOfCode": "class Dashboard:\n    def guardar_dashboard(self):\n        ventas = VentaGalleta.query.all()\n        galletas = Galleta.query.all()\n        lista1_ = []\n        lista2_ = []\n        lista_nombres_galletas = []  \n        for venta in ventas:\n            lista1_.append(venta.subTotal)\n            lista2_.append(venta.cantidad)",
        "detail": "blueprints.tablero.function.abm",
        "documentation": {}
    },
    {
        "label": "acceso_forbidden",
        "kind": 2,
        "importPath": "blueprints.tablero.tablero",
        "description": "blueprints.tablero.tablero",
        "peekOfCode": "def acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@tablero_bp.route(\"/dashboard\")\n@login_required\ndef tablero():\n    print('Antes de la validacion')\n    rol = current_user.rol\n    print('rol:', rol)\n    if rol != 'administrador':",
        "detail": "blueprints.tablero.tablero",
        "documentation": {}
    },
    {
        "label": "tablero",
        "kind": 2,
        "importPath": "blueprints.tablero.tablero",
        "description": "blueprints.tablero.tablero",
        "peekOfCode": "def tablero():\n    print('Antes de la validacion')\n    rol = current_user.rol\n    print('rol:', rol)\n    if rol != 'administrador':\n      print('entro a la validacion')\n      print(static_folder)\n      abort(403)\n    dash = Dashboard()\n    dash.guardar_dashboard()",
        "detail": "blueprints.tablero.tablero",
        "documentation": {}
    },
    {
        "label": "tablero_bp",
        "kind": 5,
        "importPath": "blueprints.tablero.tablero",
        "description": "blueprints.tablero.tablero",
        "peekOfCode": "tablero_bp = Blueprint(\"tablero\", __name__, template_folder=\"templates\")\nstatic_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@tablero_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@tablero_bp.route(\"/dashboard\")\n@login_required\ndef tablero():\n    print('Antes de la validacion')",
        "detail": "blueprints.tablero.tablero",
        "documentation": {}
    },
    {
        "label": "static_folder",
        "kind": 5,
        "importPath": "blueprints.tablero.tablero",
        "description": "blueprints.tablero.tablero",
        "peekOfCode": "static_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@tablero_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@tablero_bp.route(\"/dashboard\")\n@login_required\ndef tablero():\n    print('Antes de la validacion')\n    rol = current_user.rol",
        "detail": "blueprints.tablero.tablero",
        "documentation": {}
    },
    {
        "label": "VerificadorCaracteres",
        "kind": 6,
        "importPath": "blueprints.usuario.function.caracteres",
        "description": "blueprints.usuario.function.caracteres",
        "peekOfCode": "class VerificadorCaracteres:\n    def es_segura(self, contraseña):\n        tiene_mayuscula = any(c.isupper() for c in contraseña)\n        tiene_minuscula = any(c.islower() for c in contraseña)\n        tiene_numero = any(c.isdigit() for c in contraseña)\n        tiene_especial = re.search(r'[!@#$%^&*()_+{}\\[\\]:;<>,.?\\/\\\\-]', contraseña) is not None\n        if not (tiene_mayuscula and tiene_minuscula and tiene_numero and tiene_especial):\n           messages = 'La contraseña debe contener al menos una mayúscula, una minúscula, un número y un carácter especial. [!@#$%^&*()_+{}\\[\\]:;<>,.?\\/\\\\-]'\n           return messages\n        if None == None:",
        "detail": "blueprints.usuario.function.caracteres",
        "documentation": {}
    },
    {
        "label": "GestorUsuario",
        "kind": 6,
        "importPath": "blueprints.usuario.function.guardar",
        "description": "blueprints.usuario.function.guardar",
        "peekOfCode": "class GestorUsuario:\n    def guardar_usuario(self, form_user):\n        nombre = form_user.nombre.data\n        pwd = form_user.pwd.data\n        correo = form_user.correo.data\n        rol = form_user.rol.data\n        validacion = ValidadorContraseña().validar(pwd)\n        if validacion:\n          alert = 'warning'\n          return validacion, alert",
        "detail": "blueprints.usuario.function.guardar",
        "documentation": {}
    },
    {
        "label": "insecure_passwords",
        "kind": 5,
        "importPath": "blueprints.usuario.function.lista_negra",
        "description": "blueprints.usuario.function.lista_negra",
        "peekOfCode": "insecure_passwords = [\n    '123456',\n    'password',\n    '123456789',\n    '12345678',\n    '12345',\n    '1234',\n    '123123',\n    'qwerty',\n    'abc123',",
        "detail": "blueprints.usuario.function.lista_negra",
        "documentation": {}
    },
    {
        "label": "ValidadorContraseña",
        "kind": 6,
        "importPath": "blueprints.usuario.function.validar_pwd",
        "description": "blueprints.usuario.function.validar_pwd",
        "peekOfCode": "class ValidadorContraseña:\n    def validar(self, contraseña):\n        if contraseña in insecure_passwords:\n            messages = '¡La contraseña es débil! Por favor, elige una contraseña más segura.'\n            print(messages)\n            return messages",
        "detail": "blueprints.usuario.function.validar_pwd",
        "documentation": {}
    },
    {
        "label": "Usuario",
        "kind": 6,
        "importPath": "blueprints.usuario.model_usuario",
        "description": "blueprints.usuario.model_usuario",
        "peekOfCode": "class Usuario(UserMixin,db.Model):\n    id=db.Column(db.Integer, primary_key=True)\n    nombre=db.Column(db.String(50))\n    pwd=db.Column(db.String(100))\n    correo=db.Column(db.String(50))\n    rol=db.Column(db.String(50))\n    estatus = db.Column(db.String(10))\n    ultima_conexion=db.Column(db.DateTime)\n    create_date=db.Column(db.DateTime, default=datetime.datetime.now)",
        "detail": "blueprints.usuario.model_usuario",
        "documentation": {}
    },
    {
        "label": "redireccionar",
        "kind": 2,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "def redireccionar():\n    clave = Fernet.generate_key()\n    cipher_suite = Fernet(clave)\n    url_original = \"http://localhost:5000/modificar?id\"\n    url_encriptada = cipher_suite.encrypt(url_original.encode())\n    print(url_encriptada)\n    return redirect(url_encriptada)\n@usuario_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "acceso_forbidden",
        "kind": 2,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "def acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@usuario_bp.route(\"/usuario\", methods=['GET', 'POST'])\n#@login_required\ndef usuario():\n    form_user = UserForm(request.form)\n    gestor_usuario = GestorUsuario()\n    usuarios = ''\n    alert = ''",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "usuario",
        "kind": 2,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "def usuario():\n    form_user = UserForm(request.form)\n    gestor_usuario = GestorUsuario()\n    usuarios = ''\n    alert = ''\n    messages =''\n    print('Antes de la validacion')\n    if request.method == \"POST\":\n        messages, alert = gestor_usuario.guardar_usuario(form_user)\n        print('prueba')",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "eliminar",
        "kind": 2,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "def eliminar():\n    form_user = UserForm(request.form)\n    gestor_usuario = GestorUsuario()\n    id_usuario = request.args.get('id')\n    messages, alert = gestor_usuario.eliminar_usuario(id_usuario)\n    flash(messages)\n    usuarios = gestor_usuario.obtener_usuarios()\n    return render_template('usuario.html', form=form_user, r_usuarios = usuarios ,n=alert)\n@usuario_bp.route(\"/modificar\", methods=['GET', 'POST'])\ndef modificar():",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "modificar",
        "kind": 2,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "def modificar():\n    form_user = UserForm(request.form)\n    gestor_usuario = GestorUsuario()\n    id_usuario = request.args.get('id')\n    session['id_usuario'] = id_usuario\n    id_u = session.get('id_usuario')\n    method = request.method\n    print('metodo ejecutado ', method)\n    messages, form_usuario, alert = gestor_usuario.modificar_usuario(id_u, form_user, method)\n    if request.method == 'POST':",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "usuario_bp",
        "kind": 5,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "usuario_bp = Blueprint(\"usuario\", __name__, template_folder=\"templates\")\nstatic_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@usuario_bp.route('/redireccionar')\ndef redireccionar():\n    clave = Fernet.generate_key()\n    cipher_suite = Fernet(clave)\n    url_original = \"http://localhost:5000/modificar?id\"\n    url_encriptada = cipher_suite.encrypt(url_original.encode())\n    print(url_encriptada)\n    return redirect(url_encriptada)",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "static_folder",
        "kind": 5,
        "importPath": "blueprints.usuario.usuario",
        "description": "blueprints.usuario.usuario",
        "peekOfCode": "static_folder = os.path.join(os.path.dirname(os.path.abspath(__file__)), 'static')\n@usuario_bp.route('/redireccionar')\ndef redireccionar():\n    clave = Fernet.generate_key()\n    cipher_suite = Fernet(clave)\n    url_original = \"http://localhost:5000/modificar?id\"\n    url_encriptada = cipher_suite.encrypt(url_original.encode())\n    print(url_encriptada)\n    return redirect(url_encriptada)\n@usuario_bp.errorhandler(403)",
        "detail": "blueprints.usuario.usuario",
        "documentation": {}
    },
    {
        "label": "UserForm",
        "kind": 6,
        "importPath": "blueprints.usuario.usuario_form",
        "description": "blueprints.usuario.usuario_form",
        "peekOfCode": "class UserForm(Form):\n    id = IntegerField('id', [validators.number_range(min=1, max=20, message='valor no valido')])\n    nombre = StringField(\"Nombre\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=30, message=\"Ingresa contraseña valido\")\n    ])\n    pwd = PasswordField(\"Contraseña\",[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.length(min=0, max=150, message=\"Ingresa contraseña valido\")\n    ])",
        "detail": "blueprints.usuario.usuario_form",
        "documentation": {}
    },
    {
        "label": "InventarioG",
        "kind": 6,
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "peekOfCode": "class InventarioG(db.Model):\n    __tablename__ = 'inventario_g'\n    idInventarioG = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    idGalleta = db.Column(db.Integer, db.ForeignKey('galleta.idGalleta'), nullable=False)\n    cantidad = db.Column(db.Integer, nullable=False)\n    # Relación con Galleta\n    galleta = db.relationship('Galleta', backref='inventario_g')\nclass VentaTotal(db.Model):\n    __tablename__ = 'venta_total'\n    idVentaTotal = db.Column(db.Integer, primary_key=True, autoincrement=True)",
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "VentaTotal",
        "kind": 6,
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "peekOfCode": "class VentaTotal(db.Model):\n    __tablename__ = 'venta_total'\n    idVentaTotal = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    fecha = db.Column(db.String(30))\n    total = db.Column(db.Float, nullable=False)\n    id = db.Column(db.Integer, db.ForeignKey('usuario.id'), nullable=False)\n    # Relación con Usuario\n    usuario = db.relationship('Usuario', backref='venta_total')\nclass VentaGalleta(db.Model):\n    __tablename__ = 'venta_galleta'",
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "VentaGalleta",
        "kind": 6,
        "importPath": "blueprints.venta.model_venta",
        "description": "blueprints.venta.model_venta",
        "peekOfCode": "class VentaGalleta(db.Model):\n    __tablename__ = 'venta_galleta'\n    idVentaGalleta = db.Column(db.Integer, primary_key=True, autoincrement=True)\n    idGalleta = db.Column(db.Integer, db.ForeignKey('galleta.idGalleta'), nullable=False)\n    idVentaTotal = db.Column(db.Integer, db.ForeignKey('venta_total.idVentaTotal'), nullable=False)\n    subTotal = db.Column(db.Float, nullable=False)\n    cantidad = db.Column(db.Float, nullable=False)\n    tipoVenta = db.Column(db.String(10), nullable=False)\n    peso = db.Column(db.Float(10), nullable=False)\n    # Relaciones con Galleta y VentaTotal",
        "detail": "blueprints.venta.model_venta",
        "documentation": {}
    },
    {
        "label": "GalletaForm",
        "kind": 6,
        "importPath": "blueprints.venta.venta_form",
        "description": "blueprints.venta.venta_form",
        "peekOfCode": "class GalletaForm(FlaskForm):\n    nombre = StringField('Nombre de la galleta', validators=[\n        validators.DataRequired(message='El campo es requerido'),\n        validators.Length(min=1, max=25, message='Ingresa un nombre de galleta válido')])\n    descripcion = TextAreaField('Descripción', validators=[\n        validators.DataRequired(message='El campo es requerido')])\n    precio = FloatField('Precio', validators=[\n        validators.DataRequired(message='El campo es requerido')])\n    peso = FloatField('Peso', validators=[\n        validators.DataRequired(message='El campo es requerido')])",
        "detail": "blueprints.venta.venta_form",
        "documentation": {}
    },
    {
        "label": "acceso_forbidden",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@venta_bp.route(\"/ventaPieza\")\ndef ventaP():\n    return render_template(\"ventaPieza.html\")\n@venta_bp.route(\"/ventaPeso\")\ndef ventaPe():\n    return render_template(\"ventaPeso.html\")\n@venta_bp.route(\"/ventaCaja\")",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "ventaP",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def ventaP():\n    return render_template(\"ventaPieza.html\")\n@venta_bp.route(\"/ventaPeso\")\ndef ventaPe():\n    return render_template(\"ventaPeso.html\")\n@venta_bp.route(\"/ventaCaja\")\ndef ventaC():\n    return render_template(\"ventaCaja.html\")\n@venta_bp.route(\"/venta\", methods=['GET', 'POST'])\n@login_required",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "ventaPe",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def ventaPe():\n    return render_template(\"ventaPeso.html\")\n@venta_bp.route(\"/ventaCaja\")\ndef ventaC():\n    return render_template(\"ventaCaja.html\")\n@venta_bp.route(\"/venta\", methods=['GET', 'POST'])\n@login_required\ndef venta():\n    ventaTotalB = 0\n    idg = request.args.get('id')",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "ventaC",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def ventaC():\n    return render_template(\"ventaCaja.html\")\n@venta_bp.route(\"/venta\", methods=['GET', 'POST'])\n@login_required\ndef venta():\n    ventaTotalB = 0\n    idg = request.args.get('id')\n    galleta = None\n    galletaoinve = None\n    galletaInven = InventarioG.query.all()",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "venta",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def venta():\n    ventaTotalB = 0\n    idg = request.args.get('id')\n    galleta = None\n    galletaoinve = None\n    galletaInven = InventarioG.query.all()\n    galletas = Galleta.query.all()\n    if request.method == 'POST' or 'GET':\n        if idg is not None:\n            galleta = consultar_galleta_por_id(idg)",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "obtener_imagen",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def obtener_imagen(id):\n    # Consulta la galleta por ID en la base de datos\n    galleta = Galleta.query.get(id)\n    if galleta and galleta.imagen:\n        # Devuelve la imagen como respuesta HTTP con el tipo MIME apropiado\n        return Response(galleta.imagen, mimetype='image/jfif')  # Ajusta el MIME type según el formato de la imagen\n    else:\n        # Maneja el caso en el que no se encuentra la imagen\n        return \"Imagen no encontrada\", 404\n@venta_bp.route(\"/guatabla\", methods=['GET', 'POST'])",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "tabGalleta",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def tabGalleta():\n    # Obtener datos del formulario\n    idg = request.args.get('idG')\n    nombre_galleta = request.args.get('nombre')\n    precio = request.args.get('txtPrecio')\n    cantidad = request.args.get('txtCantidadPieza')\n    tipo = request.args.get('categoria')\n    subTotal = request.args.get('txtTotalPiezas')\n    peso = request.args.get('peso')\n    cantidadPCPE = request.args.get('caja')",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "consultar_galleta_por_id",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def consultar_galleta_por_id(id_galleta):\n    try:\n        # Consulta la galleta por su ID\n        galleta = Galleta.query.filter_by(idGalleta=id_galleta).first()\n        return galleta\n    except Exception as e:\n        print(\"Error al consultar la galleta por ID:\", e)\n        return None\ndef consultar_InventarioGalleta_por_id(id_galleta):\n    try:",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "consultar_InventarioGalleta_por_id",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def consultar_InventarioGalleta_por_id(id_galleta):\n    try:\n        # Consulta la galleta por su ID\n        galleta = InventarioG.query.filter_by(idGalleta=id_galleta).first()\n        return galleta\n    except Exception as e:\n        print(\"Error al consultar la galleta por ID:\", e)\n        return None\n@venta_bp.route(\"/limTabla\", methods=['GET', 'POST'])\n@login_required",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "limTabla",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def limTabla():\n    preVenGa.clear()\n    return redirect(url_for('.venta'))\n@venta_bp.route(\"/guardar\", methods=['GET', 'POST'])\n@login_required\ndef guardar():\n    # Obtener la fecha y hora actual\n    ahora = datetime.now()\n    # Extraer solo la fecha actual\n    fecha_actual = ahora.date()",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "guardar",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def guardar():\n    # Obtener la fecha y hora actual\n    ahora = datetime.now()\n    # Extraer solo la fecha actual\n    fecha_actual = ahora.date()\n    tota = request.args.get('total')\n    user_id = current_user.id\n    ventaTotaldb = VentaTotal(\n            total = tota,\n            id = user_id,",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "actualizar_inventario_por_id",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def actualizar_inventario_por_id(id_galleta, cantidad_vendida):\n    # Filtra la tabla para encontrar el registro con el id de la galleta que deseas actualizar\n    inventario = InventarioG.query.filter_by(idGalleta=id_galleta).first()\n    if inventario:\n        # Resta la cantidad vendida de la cantidad actual\n        inventario.cantidad -= cantidad_vendida\n        # Confirma los cambios en la base de datos\n        db.session.commit()\n        print(f\"Inventario actualizado: cantidad de galletas restantes: {inventario.cantidad}\")\n    else:",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "eliminarGaTab",
        "kind": 2,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "def eliminarGaTab():\n    posicion = int(request.args.get('id'))\n    if request.method=='GET':\n        preVenGa.pop(posicion)\n    return redirect(url_for('.venta'))",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "venta_bp",
        "kind": 5,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "venta_bp = Blueprint(\"venta\", __name__, template_folder=\"templates\")\npreVenGa = []  # Lista para almacenar las ventas\nventaTotalG = 0\n@venta_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@venta_bp.route(\"/ventaPieza\")\ndef ventaP():\n    return render_template(\"ventaPieza.html\")",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "preVenGa",
        "kind": 5,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "preVenGa = []  # Lista para almacenar las ventas\nventaTotalG = 0\n@venta_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@venta_bp.route(\"/ventaPieza\")\ndef ventaP():\n    return render_template(\"ventaPieza.html\")\n@venta_bp.route(\"/ventaPeso\")",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "ventaTotalG",
        "kind": 5,
        "importPath": "blueprints.venta.ventas",
        "description": "blueprints.venta.ventas",
        "peekOfCode": "ventaTotalG = 0\n@venta_bp.errorhandler(403)\ndef acceso_forbidden(error):\n    static_folder = 'static'\n    return send_from_directory(static_folder, 'acceso_rol.html'), 403\n@venta_bp.route(\"/ventaPieza\")\ndef ventaP():\n    return render_template(\"ventaPieza.html\")\n@venta_bp.route(\"/ventaPeso\")\ndef ventaPe():",
        "detail": "blueprints.venta.ventas",
        "documentation": {}
    },
    {
        "label": "Config",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class Config(object):\n    SECRET_KEY='CLAVE SECRETA'\n    SESSION_COOKIE_SECURE=False\n    @staticmethod\n    def init_app(app):\n        pass\nclass DevelomentConfig(Config):\n    DEBUG=True\n    usuario = os.getenv(\"DB_USERNAME\")\n    pwd = os.getenv(\"DB_PASSWORD\")",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "DevelomentConfig",
        "kind": 6,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "class DevelomentConfig(Config):\n    DEBUG=True\n    usuario = os.getenv(\"DB_USERNAME\")\n    pwd = os.getenv(\"DB_PASSWORD\")\n    DB = os.getenv(\"DB\")\n    DB_H = os.getenv(\"DB_HOST\")\n    print(usuario)\n    print(pwd)\n    print(DB)\n    print(DB_H)",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "db",
        "kind": 5,
        "importPath": "config",
        "description": "config",
        "peekOfCode": "db = SQLAlchemy()",
        "detail": "config",
        "documentation": {}
    },
    {
        "label": "unauthorized_error",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401\n@login_manager.user_loader\ndef load_user(user_id): \n    return Usuario.query.get(int(user_id))\n@app.errorhandler(404)\ndef page_not_found(e):\n    return send_from_directory(app.static_folder,'404.html'), 404\napp.register_blueprint(menu_bp)\napp.register_blueprint(usuario_bp)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "load_user",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def load_user(user_id): \n    return Usuario.query.get(int(user_id))\n@app.errorhandler(404)\ndef page_not_found(e):\n    return send_from_directory(app.static_folder,'404.html'), 404\napp.register_blueprint(menu_bp)\napp.register_blueprint(usuario_bp)\napp.register_blueprint(venta_bp)\napp.register_blueprint(recetas_bp)\napp.register_blueprint(proveedor_bp)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "page_not_found",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def page_not_found(e):\n    return send_from_directory(app.static_folder,'404.html'), 404\napp.register_blueprint(menu_bp)\napp.register_blueprint(usuario_bp)\napp.register_blueprint(venta_bp)\napp.register_blueprint(recetas_bp)\napp.register_blueprint(proveedor_bp)\napp.register_blueprint(login_bp)\napp.register_blueprint(produccion_bp)\napp.register_blueprint(tablero_bp)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app = Flask(__name__)\napp.config.from_object(DevelomentConfig)\napp._static_folder = 'static'\nallowed_ips = [\"127.0.0.1\",\"192.168.1.100\"]\ncors = CORS(app, resources={r\"*\": {\"origins\": allowed_ips}})\nlogin_manager = LoginManager(app)\nlog_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "app._static_folder",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "app._static_folder = 'static'\nallowed_ips = [\"127.0.0.1\",\"192.168.1.100\"]\ncors = CORS(app, resources={r\"*\": {\"origins\": allowed_ips}})\nlogin_manager = LoginManager(app)\nlog_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "allowed_ips",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "allowed_ips = [\"127.0.0.1\",\"192.168.1.100\"]\ncors = CORS(app, resources={r\"*\": {\"origins\": allowed_ips}})\nlogin_manager = LoginManager(app)\nlog_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "cors",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "cors = CORS(app, resources={r\"*\": {\"origins\": allowed_ips}})\nlogin_manager = LoginManager(app)\nlog_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401\n@login_manager.user_loader",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "login_manager",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "login_manager = LoginManager(app)\nlog_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401\n@login_manager.user_loader\ndef load_user(user_id): ",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "log_directory",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "log_directory = '/logs'\nlogging.basicConfig(filename=os.path.join('logs/app.log'), level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')\nlogging.getLogger('werkzeug').setLevel(logging.ERROR)\ncsrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401\n@login_manager.user_loader\ndef load_user(user_id): \n    return Usuario.query.get(int(user_id))",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "csrf",
        "kind": 5,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "csrf = CSRFProtect(app)\n@app.errorhandler(401)\ndef unauthorized_error(error):\n    return send_from_directory(app.static_folder,'no_autorizado.html'), 401\n@login_manager.user_loader\ndef load_user(user_id): \n    return Usuario.query.get(int(user_id))\n@app.errorhandler(404)\ndef page_not_found(e):\n    return send_from_directory(app.static_folder,'404.html'), 404",
        "detail": "main",
        "documentation": {}
    }
]